"use strict";(self.webpackChunkknowledge=self.webpackChunkknowledge||[]).push([[305],{239:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var o=n(4848),t=n(8453);const i={},a="Terraform",s={id:"tech/terraform",title:"Terraform",description:"Terraform is an open-source infrastructure as code (IaC) tool that allows you to define and manage cloud, network, and server resources using a human-readable configuration file. It's designed to work with various cloud providers such as Amazon Web Services, Microsoft Azure, Google Cloud Platform, and others.",source:"@site/knowledge/tech/terraform.md",sourceDirName:"tech",slug:"/tech/terraform",permalink:"/knowledge/tech/terraform",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Security & Code Analysis",permalink:"/knowledge/tech/security"},next:{title:"Creative",permalink:"/knowledge/category/creative"}},c={},l=[{value:"Project structure example",id:"project-structure-example",level:2},{value:"Terraform commands",id:"terraform-commands",level:2}];function u(e){const r={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h1,{id:"terraform",children:"Terraform"}),"\n",(0,o.jsx)(r.p,{children:"Terraform is an open-source infrastructure as code (IaC) tool that allows you to define and manage cloud, network, and server resources using a human-readable configuration file. It's designed to work with various cloud providers such as Amazon Web Services, Microsoft Azure, Google Cloud Platform, and others."}),"\n",(0,o.jsx)(r.p,{children:"Here's what makes Terraform unique:"}),"\n",(0,o.jsxs)(r.ol,{children:["\n",(0,o.jsx)(r.li,{children:"Infrastructure as Code (IaC): Terraform allows you to define your infrastructure in code, using a HashiCorp Configuration Language (HCL) syntax. This means you can version control your infrastructure configuration, just like you would with software code."}),"\n",(0,o.jsx)(r.li,{children:"Multi-cloud support: Terraform supports multiple cloud providers, including AWS, Azure, GCP, and many others. You can use Terraform to manage your infrastructure across multiple clouds or on-premises environments."}),"\n",(0,o.jsx)(r.li,{children:"State management: Terraform keeps track of the current state of your infrastructure by creating a snapshot of the resources you've created. This allows you to easily manage changes, rollbacks, and drift detection (detecting when actual infrastructure deviates from the desired configuration)."}),"\n",(0,o.jsx)(r.li,{children:"Modules: Terraform modules are reusable pieces of code that can be used to define specific components of your infrastructure, such as networks or databases."}),"\n",(0,o.jsx)(r.li,{children:"Extensibility: Terraform has a rich ecosystem of plugins and integrations with other tools and services, making it easy to integrate with existing workflows."}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"project-structure-example",children:"Project structure example"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-code",children:"project-name/\n    main.tf # Main configuration file\n    variables.tf # File for defining input variables\n    outputs.tf # File for defining output variables\n    providers.tf # Configuration file for provider plugins\n    modules/ # Directory for reusable Terraform modules\n        module1/\n            main.tf # Module-specific configuration file\n        module2/\n            main.tf # Another module-specific configuration file\n    environments/ # Directory for environments-specific configuration files\n        development/\n            variables.tfvars # Input variable overrides for the development environment\n        production/\n            variables.tfvars # Input variable overrides for the production environment\n        staging/\n            variables.tfvars # Input variable overrides for the staging environment\n"})}),"\n",(0,o.jsx)(r.h2,{id:"terraform-commands",children:"Terraform commands"}),"\n",(0,o.jsxs)(r.ul,{children:["\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"terraform init"})," - Initialize a new Terraform working directory from a configuration file or a module directory. This command is typically run at the root of your project, and it downloads any plugins required by the configuration files in the current directory."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"terraform plan"})," - Generate and show an execution plan for Terraform to execute. This command shows what actions will be performed when you run ",(0,o.jsx)(r.code,{children:"terraform apply"}),"."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"terraform apply"})," - Apply the changes required to reach the desired state as defined in the configuration files. This is typically used after running a ",(0,o.jsx)(r.code,{children:"plan"}),", which generates a list of actions that will be executed by Terraform."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"terraform destroy"})," - Destroy all resources created by the configuration, including any remote state stored in a backend."]}),"\n",(0,o.jsxs)(r.li,{children:[(0,o.jsx)(r.code,{children:"terraform fmt"})," - Reformats and reorganizes your configuration files to ensure consistency and readability."]}),"\n"]})]})}function d(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>s});var o=n(6540);const t={},i=o.createContext(t);function a(e){const r=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),o.createElement(i.Provider,{value:r},e.children)}}}]);